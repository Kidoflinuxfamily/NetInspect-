import pcapy
import socket
from struct import unpack

class NetInspect:
    def __init__(self, interface):
        self.interface = interface

    def analyze_packet(self, header, data):
        eth_length = 14
        eth_header = data[:eth_length]
        eth = unpack('!6s6sH', eth_header)
        eth_protocol = socket.ntohs(eth[2])

        if eth_protocol == 8:  # IPv4
            ip_header = data[eth_length:20+eth_length]
            iph = unpack('!BBHHHBBH4s4s', ip_header)
            version_ihl = iph[0]
            ihl = version_ihl & 0xF
            iph_length = ihl * 4

            src_ip = socket.inet_ntoa(iph[8])
            dest_ip = socket.inet_ntoa(iph[9])

            tcp_header = data[iph_length+eth_length:iph_length+eth_length+20]
            tcph = unpack('!HHLLBBHHH', tcp_header)

            src_port = tcph[0]
            dest_port = tcph[1]
            sequence = tcph[2]
            acknowledgement = tcph[3]

            print('Source IP:', src_ip)
            print('Destination IP:', dest_ip)
            print('Source Port:', src_port)
            print('Destination Port:', dest_port)
            print('Sequence:', sequence)
            print('Acknowledgement:', acknowledgement)
            print('-------------------------')

    def start_capture(self):
        cap = pcapy.open_live(self.interface, 65536, 1, 0)
        print(f"Listening on {self.interface}...")
        while True:
            (header, data) = cap.next()
            self.analyze_packet(header, data)

if __name__ == "__main__":
    net_inspect = NetInspect('eth0')
    net_inspect.start_capture()
